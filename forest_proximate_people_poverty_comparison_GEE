//Global Forest Cover and Forest Cover Change Datasets
//Code: Forest Proximate People in Poverty for India; Generates Figure 5 and Table S4
//Generates estimates of forest proximate people in poverty for a single country for each of the eight global forest datasets
//Citation: [cite]
//Author: Sarah Castle
//Date: 12 December 2023
  //For forest-proximate people analysis and code this derived from, 
  //See FAO technical report: Citation: Newton, P., Castle, S.E., Kinzer, A.T., Miller, D.C., Oldekop, J.A., Linhares-Juvenal, T., Madrid, M., Pina, L. 2022. The number of forest- and tree-proximate people: a new methodology and global estimates. Rome, FAO. 


//*****************************************************************************//
//*****************************************************************************//

//User defined input variables. Please select appropriate variables for current analysis here.
//Current analysis settings are for estimating forest proximate people in poverty in the year 2017 for India. 
  //Forest proximity is defined by people living in or within 1 kilometers (1000 meters) of land 
  //classified as forest by each dataset. High density urban areas 
  //were excluded, where these urban areas were defined as contiguous areas with a total population 
  //of at least 50,000 people and comprised of pixels which met at least one of two criteria: either 
  //the pixel a) had at least 1,500 people per square km, or b) was classified as “built-up” land use 
  //by the MODIS dataset (where “built-up” was defined as land covered by buildings and other manmade structures).
//Gridded relative wealth index in India using Chi et al. (2022) data found here: https://data.humdata.org/dataset/relative-wealth-index 
  //To preprocess Chi et al. data using ArcGIS Pro and import to GEE follow these steps: 1. Import csv file with downloaded point data to ArcGIS Pro
  //2. Run "XY Table to Point" tool to convert csv data to point data layer.
  //3. Project point layer to "WGS_1984_Web_Mercator_Auxiliary_Sphere".
  //4. Run "Point to Raster" tool with the projected point layer as "Input Features", "RWI" as the "Value Field", "Mean" as the "Cell assignment type",  and "2446" as the "Cellsize" 
  //5. Export resulting raster layer as a ""TIFF"" file, which can then be imported into Google Earth Engine as a GeoTIFF. "

var country = 'IND'; //country code //Select country of analysis using country code. Here, India. 
//See https://www.worldpop.org/resources/docs/national_boundaries/global-input-population-data-summary.xlsx for country codes.

var year = 2017; //Select year for analysis. Here, 2019 for latest data.
var distance = 1000; //Select distance parameter in meters (search radius for identifying population with XX meters of forest pixels)
var ruralImage = ruralPopAssetIndia2017; //Select Google Earth Engine asset name corresponding to user-generated rural population (generated by running the "urban_rural_code_publication" code).
var povertyAsset = povertyAssetIndiaPakChi2017; 

//Define Google Earth Engine asset name
var FPPasset = 'PAK_FPP_5km_GEEasset';
var FPPpovertyasset = 'PAK_Chi_FPP_poverty_5km_GEEasset';

//Define export file names 
var ForestimageDescription = 'IND_worldforests2018_image'; //select name for forests image export (exports GeoTIFF file to user's Google Drive)
var FPPimageDescription = 'IND_FPP2018_1km_image'; //select name for forest proximate people image export (exports GeoTIFF file to user's Google Drive)
var FPPpovertyimageDescription = 'IND_Chi_FPP_poverty2018_1km_image'; //select name for forest proximate people image export (exports GeoTIFF file to user's Google Drive)

var FPPDistrictTableDescription = 'IND_FPP2018_byDistrict_1km'; //select name for forest proximate people image export (exports GeoTIFF file to user's Google Drive)
var FPPpovertyDistrictTableDescription = 'IND_FPPpovertyChi2018_byDistrict_1km';
//In Tasks only run whichever of these export tasks you would like to export.

//Only need to change the following if there is an update to the datasets. See GEE documentation.
  //WorldPop documentation: https://developers.google.com/earth-engine/datasets/catalog/WorldPop_GP_100m_pop?hl=en#description
  //Copernicus Global Land Cover (CGLC) documentation: https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_Landcover_100m_Proba-V-C3_Global?hl=en#description
  //MODIS Land Cover documentation: https://developers.google.com/earth-engine/datasets/catalog/MODIS_006_MCD12Q1?hl=en#description
var worldPopIC = "WorldPop/GP/100m/pop"; //Select GEE WorldPop population data Image Collection path. 
//var FNF = "JAXA/ALOS/PALSAR/YEARLY/FNF"; //Select GEE Copernicus Global Land Cover Image Collection path.
var CGLC_IC = "COPERNICUS/Landcover/100m/Proba-V-C3/Global/"+year; //Select GEE Copernicus Global Land Cover Image Collection path.

//NOTE: Import the generated rural population data layer before running this code.
//To test and visualize the rural population data layer uncomment the following line:
//Map.addLayer(ruralImage,visualization,'ruralImage');

//--------------------------------------------------------------------------//
//Imports
var C3S_LLCS_2019 = ee.Image("users/saraheb3/C3S-LCCS-300m-2019"),
    C3S_LLCS_2020 = ee.Image("users/saraheb3/C3S-LCCS-300m-2020"),
    HDI = ee.Image("users/saraheb3/hdi_raster_predictions"),
    povertyAssetIndiaPakChi2017 = ee.Image("users/saraheb3/poverty/Chi_INDPAK_RWI"),
    C3S_LLCS_2018 = ee.Image("users/saraheb3/C3S-2018"),
    ruralPopAssetIndia2017 = ee.Image("users/saraheb3/ruralPop_IND_GEEasset_2017"),
    C3S_LLCS_2016 = ee.Image("users/saraheb3/C3S-2016"),
    Forests11 = ee.Image("users/saraheb3/IND_ESAWC_2020_Forests72m"),
    Forests10 = ee.Image("users/saraheb3/IND_ESRI_2017_Forests72m");
    
var vis = {
  min: -3.0,
  max: 3.0,
  palette: ['24126c', '1fff4f', 'd4ff50']
};
Map.addLayer(povertyAssetIndiaPakChi2017,{},'povertyAssetIndiaPakChi2017');
Map.addLayer(HDI,{},'HDI');

//Import WorldPop gridded population data from Google Earth Engine (GEE) database. 
//WorldPop is a 100-meter spatial resolution, annually released globally gridded population dataset. 
//See: https://developers.google.com/earth-engine/datasets/catalog/WorldPop_GP_100m_pop?hl=en#description
var populationdata = ee.ImageCollection(worldPopIC)
  .filter(ee.Filter.equals('year', 2016)) //Select year for analysis. Here, 2019 for latest data.
  .filter(ee.Filter.equals('country', country))
  .select('population');//.mosaic();

var populationdataimg = populationdata.reduce({reducer: ee.Reducer.median()});
var populationdata1 = populationdataimg.add(1);
//Select color scheme for visualizing population data
var visualization = {
  min: 0.0,
  max: 50.0,
  palette: ['24126c', '1fff4f', 'd4ff50']
};


Map.addLayer(populationdataimg,visualization,'popdata');
Map.addLayer(ruralPopAssetIndia2017,visualization,'ruralPopAssetIndia2018');
//-----------------------------------------------------------------------------------------//

//Copernicus global land cover
//2015-2019
//100 m
var dataset1 = ee.Image("COPERNICUS/Landcover/100m/Proba-V-C3/Global/"+year)
.select('discrete_classification');
dataset1 = dataset1.mask(populationdata1);

//Identify forest and non-forest areas to exclude forested areas from the TPP analysis
var gtForests = dataset1.gt(110); 
var ltForests = dataset1.lt(199); 
var Forests = ltForests.and(gtForests);
//Map.addLayer(Forests.selfMask(),{palette:['#228B22']},'Copernicus Forests');
//print(Forests);


//-----------------------------------------------------------------------------------------//

//MODIS Land Cover Type
//2001-2020
//500 m
//**LC_Type 1
var dataset = ee.ImageCollection('MODIS/006/MCD12Q1');
var igbpLandCover = dataset.select('LC_Type1').filterDate(year+'-01-01', year+'-12-31');

igbpLandCover = igbpLandCover.first().mask(populationdata1);

var Forests2 = igbpLandCover.lt(6); //Excludes savannahs 
//Map.addLayer(Forests2.selfMask(),{palette:['#228B22']},'MODIS IGBP Forests');


//-------------------
//**LC_Prop 1 FAO
var dataset = ee.ImageCollection('MODIS/006/MCD12Q1');
var FAOLandUse = dataset.select('LC_Prop1').filterDate(year+'-01-01', year+'-12-31');

FAOLandUse = FAOLandUse.first().mask(populationdata1);

var gtFAO = FAOLandUse.gt(10);
var ltFAO = FAOLandUse.lt(23);
var Forests7 = gtFAO.and(ltFAO);
//Map.addLayer(Forests7.selfMask(),{palette:['#228B22']},'MODIS FAO Forests Land Cover');

//-----------------------------------------------------------------------------------------//
//ESRI 2020 Land Cover

//var esri_lulc2020= ee.ImageCollection("projects/sat-io/open-datasets/landcover/ESRI_Global-LULC_10m").mosaic();
//esri_lulc2020 = esri_lulc2020.mask(populationdata1);

//var Forests10 = esri_lulc2020.eq(2);

var esri_lulc_ts= ee.ImageCollection("projects/sat-io/open-datasets/landcover/ESRI_Global-LULC_10m_TS").filterDate(year+'-01-01', year+'-12-31').mosaic();
esri_lulc_ts = esri_lulc_ts.mask(populationdata1);

//var Forests10 = esri_lulc_ts.eq(2);
//Map.addLayer(Forests10.selfMask(),{palette:['#228B22']}, 'ESRI Trees');


//-----------------------------------------------------------------------------------------//

//ESA WorldCover 2020

var ESA_WC = ee.ImageCollection("ESA/WorldCover/v100").first().select('Map');
ESA_WC = ESA_WC.mask(populationdata1);

//var Forests11 = ESA_WC.eq(10);
//Map.addLayer(Forests11.selfMask(),{palette:['#228B22']}, "ESA WorldCover Forests");

//-----------------------------------------------------------------------------------------//

//PALSAR/PALSAR-2 Forest/Non-forest
var palsar = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/FNF4')
                  .filterDate(year+'-01-01', year+'-12-31');
var forestNonForest = palsar.select('fnf');

forestNonForest = forestNonForest.first().mask(populationdata1);

var Forests12 = forestNonForest.lte(2);
//Map.addLayer(Forests12.selfMask(),{palette:['#228B22']}, 'PALSAR Forest/Non-Forest');


//-----------------------------------------------------------------------------------------//

//Copernicus Climate Change Service global Land Cover (C3S-LC)
//Map.addLayer(C3S_LLCS_2020, {},"C3S 2020");
//print(C3S_LLCS_2020);
C3S_LLCS_2016 = C3S_LLCS_2016.mask(populationdata1);

var gtC3S = C3S_LLCS_2016.gte(50);
var ltC3s = C3S_LLCS_2016.lte(90);
var Forests13 = gtC3S.and(ltC3s);

//Map.addLayer(Forests13.selfMask(), {palette:['#228B22']},"C3S 2018 Forests");

var GLAD = ee.Image("projects/glad/GLCLU2020/Forest_type");
//print(GLAD);

var Forests14 = (GLAD.eq(1)).or(GLAD.eq(3));
Forests14 = Forests14.mask(populationdata1);

//-----------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------//
var sumForestsc = Forests.add(Forests2).add(Forests7).add(Forests10).add(Forests11).add(Forests12).add(Forests13).add(Forests14).selfMask();
var singleBandVis6 = {
  min: 1,
  max: 7,
  palette: ['#8B0000','#FF0000','#FF8C00', '#FFFF00','#32CD32','#006400']
};
Map.addLayer(sumForestsc,singleBandVis6,'sumForestsc_onlyIGBP-FAOLLC1');


//Export forest extent data:
Export.image.toDrive({
  image: sumForestsc,
  description:'SpatialAgreementForests_MODIS-IGBP_FAOLLC1',
  folder: "GEE_Folder",
  scale:1000,
  maxPixels:1e13,
  region: geom,
  skipEmptyTiles:true,
  fileFormat: 'GeoTIFF'
});
var forests = Forests11;

//Map.addLayer(ruralImage,visualization,'ruralImage');

var visualization2 = {
  min: -3.0,
  max: 3.0,
  palette: ['24126c', '1fff4f', 'd4ff50']
};

povertyAsset = povertyAsset.mask(populationdata1);
//Map.addLayer(povertyAsset,visualization2,'poverty 2017');


//-Visualize raw population data at 100-meter resolution.-
//Remove comments from following three lines to visualize population data layer:

//Map.addLayer(populationdata, visualization, 'Population');
//print('Population data',populationdata);

var FP3pop_country_list = ee.List([]); //initate empty list to store country level data

var geom = populationdata.geometry();

var pixelArea = ee.Image.pixelArea().mask(populationdata1);
//Map.addLayer(pixelArea,{},'pixelArea');

var CoAreaSum = ee.Image(pixelArea).reduceRegion({ //generate country area
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, //use data layer resolution (~93m) 
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});

var squareMetersA = CoAreaSum.getNumber('area');
var squareKilometersA = squareMetersA.divide(1e6);
print("Total area sq km: ",squareKilometersA);
var varname = "totalarea";
FP3pop_country_list = FP3pop_country_list.add([squareKilometersA,varname]); //add current country area


var maskedForestArea = pixelArea.updateMask(forests).selfMask();
//Map.addLayer(maskedForestArea,{},'maskedForestArea');

var forestAreaSum = ee.Image(maskedForestArea).reduceRegion({ //generate sum of forest area
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100,  
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});

var squareMetersF = forestAreaSum.getNumber('area');
var squareKilometersF = squareMetersF.divide(1e6);
print("Forest area sq km: ",squareKilometersF);
var varname = "forestarea";
FP3pop_country_list = FP3pop_country_list.add([squareKilometersF,varname]); //add FPP to list

//Generate GEE ImageCollection of populations within distance of forests (data layer of population within X km of forests).
var cost = populationdata1.cumulativeCost({source: forests, 
  maxDistance:distance, //Select distance parameter in meters. Here, we created data layer of populations within 5 km (5000 m) of forests.
  geodeticDistance: false});
var dist2forest = cost.add(1); //set minimum value to 1 instead of 0 to avoid issues with masking layers.


//-Visualize distance to forests data at 100-meter resolution-
//Remove comments from following three lines to visualize distance to forests data layer:
/*
Map.addLayer(dist2forest, {min:1, max:3, palette: ['24126c', '1fff4f', 'd4ff50']}, 'dist2forest');
print('dist2forest: ', dist2forest);
*/
//Reduce population data ImageCollection and distance to forest ImageCollection to Images.
var pop_img = populationdata.reduce({reducer: ee.Reducer.median()});
var dist_img = dist2forest.reduce({reducer: ee.Reducer.median()});

//Map.addLayer(dist_img, {palette:['24126c','70daa4']}, 'dist_img');

//Mask population data with rural area image to generate rural population data layer
var ruralPop = populationdataimg.mask(ruralImage).selfMask(); //Need to create rural-urban layer asset. Use rural-urban code provided and export asset to user's assets. Call the rural-urban asset layer that was imported into the script (currently called "ruralPopDev50k").

var maskedRuralArea = pixelArea.updateMask(ruralImage).selfMask();
//Map.addLayer(maskedRuralArea,{},'maskedRuralArea');

var ruralAreaSum = ee.Image(maskedRuralArea).reduceRegion({ //generate sum of rural area
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});

var squareMetersR = ruralAreaSum.getNumber('area');
var squareKilometersR = squareMetersR.divide(1e6);
print("Rural area sq km: ",squareKilometersR);
var varname = "ruralarea";
FP3pop_country_list = FP3pop_country_list.add([squareKilometersR,varname]); //add current country rural  area to list 


var maskedRuralForestArea = maskedRuralArea.updateMask(forests).selfMask();
//Map.addLayer(maskedRuralForestArea,{},'maskedRuralForestArea');

var ruralForestAreaSum = ee.Image(maskedRuralForestArea).reduceRegion({ //generate sum of rural forested area
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});

var squareMetersRF = ruralForestAreaSum.getNumber('area');
var squareKilometersRF = squareMetersRF.divide(1e6);
print("Forest area on rural lands sq km: ",squareKilometersRF);
var varname = "forestruralarea";
FP3pop_country_list = FP3pop_country_list.add([squareKilometersRF,varname]); //add current country FPP to list

//-Visualize rural population by uncommenting the line below.-
//Map.addLayer(ruralPop, visualization, 'ruralPop');

////Mask rural population data with forest proximate people data layer to generate rural forest proximate people data layer
var forestPop = ruralPop.mask(dist_img).selfMask();

//-Visualize rural forest proximate people by uncommenting the line below.
Map.addLayer(forestPop, visualization, 'forestPop');
//print('forestPop',forestPop);


//To export forest extent and FPP spatial data, uncomment lines below and export GeoTIFF to user's Google Drive through the "Tasks" list.
var geom = populationdata.geometry();
//print(geom);
//Export forest extent data:
Export.image.toDrive({
  image: forests,
  description:ForestimageDescription,
  folder: "GEE_Folder",
  scale:100,
  maxPixels:1e13,
  region: geom,
  skipEmptyTiles:true,
  fileFormat: 'GeoTIFF'
});

//Export FPP data:
var forestPop_img = forestPop.reduce({reducer: ee.Reducer.median()}).toFloat();

//Map.addLayer(forestPop_img, visualization, 'forestPop');
//print('forestPop_img',forestPop_img);
//print(ee.Image(forestPop_img).projection());

//Export FPP data to GEE asset
Export.image.toAsset({
  image: forestPop_img,
  description:FPPasset,
  scale:100,
  maxPixels:1e13,
  region: geom
});

//Export FPP data to Google Drive
Export.image.toDrive({
  image: forestPop_img,
  description:FPPimageDescription,
  folder: "GEE_Folder",
  scale:100,
  maxPixels:1e13,
  region: geom,
  skipEmptyTiles:true,
  fileFormat: 'GeoTIFF'
});


var pop = ee.Image(forestPop_img).reduceRegions({ //generate sum of FPP population
  collection: geom,
  reducer: ee.Reducer.sum(),
  scale: 100,
  crs: 'EPSG:4326', // world wide crs 
  tileScale:16 //set to 16 to avoid processing limitations
});

pop = pop.aggregate_array('sum').get(0);

//Print FPP value for country
print("Number of forest proximate people in 2018: ",pop);
var varname = "fpp";
FP3pop_country_list = FP3pop_country_list.add([pop,varname]); //add current country FP3 to list

var poverty = povertyAsset.lt(-0.20).selfMask(); //iterate to determine threshold for identifying population in poverty as reported by country
Map.addLayer(poverty,visualization2,'poorer1');

var poorerpop = populationdataimg.mask(poverty);
//Map.addLayer(poorerpop.selfMask(),visualization2,'poorerpop');

var povertypop = ee.Image(poorerpop).reduceRegions({ //generate sum of population in poverty 
  collection: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  crs: 'EPSG:4326', // world wide crs 
  tileScale:16 //set to 16 to avoid processing limitations
});
povertypop = povertypop.aggregate_array('sum').get(0);

//Print number of people in poverty value for country
print("Number of people in poverty in 2018 Chi: ", povertypop);
var varname = "povertynum";
FP3pop_country_list = FP3pop_country_list.add([povertypop,varname]); //add current country FPP to list 

var ruralpovimg = poorerpop.mask(ruralImage).selfMask();
//Map.addLayer(ruralpovimg, visualization2, 'ruralpoverty 2017');

var ruralpovertypop = ee.Image(ruralpovimg).reduceRegions({ //generate sum of rural population in poverty
  collection: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  crs: 'EPSG:4326', // world wide crs 
  tileScale:16 //set to 16 to avoid processing limitations
});
ruralpovertypop = ruralpovertypop.aggregate_array('sum').get(0);

//Print rural people in poverty value for country
print("Number of rural people in poverty in 2018 Chi: ", ruralpovertypop);
var varname = "ruralpovertypop";
FP3pop_country_list = FP3pop_country_list.add([ruralpovertypop,varname]); //add current country FP3 to list

var FPPpoverty = forestPop.mask(poverty).selfMask();
Map.addLayer(FPPpoverty, visualization, 'FPP in poverty 2018');
//print('FPPpoverty: ',FPPpoverty);


var pop_poverty = ee.Image(FPPpoverty).reduceRegions({ //generate sum of FP3 population
  collection: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  crs: 'EPSG:4326', // world wide crs 
  tileScale:16 //set to 16 to avoid processing limitations
});

pop_poverty = pop_poverty.aggregate_array('sum').get(0);

//Print FP3 value for country
print("Number of forest proximate people in poverty in 2018: ", pop_poverty);
var varname = "fp3";
FP3pop_country_list = FP3pop_country_list.add([pop_poverty,varname]); //add current country FP3 to list 

//Export FP3 data to GEE asset
Export.image.toAsset({
  image: FPPpoverty,
  description:FPPpovertyasset,
  scale:100,
  maxPixels:1e13,
  region: geom
});

//Export FP3 data to Google Drive
Export.image.toDrive({
  image: FPPpoverty,
  description:FPPpovertyimageDescription,
  folder: "GEE_Folder",
  scale:100,
  maxPixels:1e13,
  region: geom,
  skipEmptyTiles:true,
  fileFormat: 'GeoTIFF'
});

var FP3pop_country_list = ee.FeatureCollection(FP3pop_country_list //function to convert FP3 list to FeatureCollection for exporting.
  .map(function(element){ 
    return ee.Feature(null,{
      //'scale':ee.List(element).get(0),
      'value':ee.List(element).get(0),
      'varname':ee.List(element).get(1)
    }
    )}));
//print(pop_country_list); //print FeatureCollection of FP3 data
Export.table.toDrive({//export FP3 results to user's Google Drive in csv format
    collection:FP3pop_country_list, 
    folder: "GEE_Folder",
    description:"valuestableIndiaFP3",
    fileFormat: 'csv'
    });







//Comparsion: Area in full agreement estimate and area defined as forest by at least one dataset.

var country = 'IND'; //country code //Select country of analysis using country code. Here, India. 
//See https://www.worldpop.org/resources/docs/national_boundaries/global-input-population-data-summary.xlsx for country codes.

var year = 2019; //Select year for analysis. Here, 2019 for latest data.
var agreement_list = ee.List([]); //initate empty list to store  country level data

var visualization2 = {
  min: 0.0,
  max: 80.0,
  palette: ['ffffff','d9f0a3', 'addd8e', '78c679', '41ab5d', '238443', '005a32']
};

var populationdata = ee.ImageCollection("WorldPop/GP/100m/pop")
  .filter(ee.Filter.equals('year', year)) //Select year for analysis. Here, 2019 for latest data.
  .filter(ee.Filter.equals('country', country))
  .select('population');//.mosaic();

var populationdataimg = populationdata.reduce({reducer: ee.Reducer.median()});
var populationdata1 = populationdataimg.add(1);

var geom = populationdata.geometry();


var compare1_2 = sumForestsc.mask(populationdata1);
Map.addLayer(compare1_2,visualization2,'compare1_2');
//print(compare1_2);

var matchdescription = 'INDIA_match_gte8_noSavanna_country_list_100m_IND';
var forestdescription = 'INDIA_forest_union8_noSavanna_country_list_100m_IND';

var match1_2 = compare1_2.gte(8) 
  .selfMask()
  .rename('match1_2');
//Map.addLayer(match1_2, {palette: 'd4ff50'}, 'match1_2');


var totalForest1_2 = compare1_2.gt(0) 
  .selfMask()
  .rename('totalForest1_2');
//Map.addLayer(totalForest1_2, {palette: 'd4ff50'}, 'totalForest1_2');


var visualization = {
  min: 0.0,
  max: 50.0,
  palette: ['24126c', '1fff4f', 'd4ff50']
};


//-----------------------------------------------------------------------------------------//

//Sum forest area and agreement between datasets over each country to get country-level estimates.

var visualization2 = {
  min: 0.0,
  max: 30.0,
  palette: ['24126c', '1fff4f', 'd4ff50']
};


var imgTemp = populationdataimg.add(1);
imgTemp = imgTemp.remap({from:[1],to:[1],defaultValue:1});

var MatchCountry = imgTemp.updateMask(match1_2);
//Map.addLayer(MatchCountry,visualization2,'MatchCountry');
//print(MatchCountry);

var imgTemp = populationdataimg.add(1);
imgTemp = imgTemp.remap({from:[1],to:[1],defaultValue:1});
 
var forestCountry = imgTemp.updateMask(totalForest1_2);  
//Map.addLayer(forestCountry,visualization2,'forestCountry');
//print(forestCountry);
 


//Matched pixels total agreement area across all eight datasets

var pixelArea = ee.Image.pixelArea();

var geom = ee.Image(populationdata.first()).geometry();
print(geom);

var maskedMatchArea = pixelArea.updateMask(MatchCountry);
Map.addLayer(maskedMatchArea);
var matchSum = ee.Image(maskedMatchArea).reduceRegion({ 
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});
print(matchSum);
var varname = "agreement8";
agreement_list = agreement_list.add([matchSum,varname]); 


var squareMeters = matchSum.getNumber('area');
var squareKilometers = squareMeters.divide(1e6);

print(squareKilometers);
var varname = "agreement8sqkm";
agreement_list = agreement_list.add([squareKilometers,varname]); 


//Total forest area across all datasets

var maskedMatchArea = pixelArea.updateMask(forestCountry);
//Map.addLayer(maskedMatchArea);
var matchSum = ee.Image(maskedMatchArea).reduceRegion({ 
  geometry: geom,
  reducer: ee.Reducer.sum(),
  scale: 100, 
  tileScale:16, //set to 16 to avoid processing limitations
  maxPixels:1e13,
  //bestEffort: true
});
print(matchSum);
var varname = "allforestpixels";
agreement_list = agreement_list.add([matchSum,varname]); 

var squareMeters = matchSum.getNumber('area');
var squareKilometers = squareMeters.divide(1e6);
print(squareKilometers);

var varname = "allforestpixelssqkm";
agreement_list = agreement_list.add([squareKilometers,varname]); 
var agreement_list_ex = ee.FeatureCollection(agreement_list 
  .map(function(element){ 
    return ee.Feature(null,{
      'value':ee.List(element).get(0),
      'varname':ee.List(element).get(1)
    }
    )}));
    
Export.table.toDrive({//export results to user's Google Drive in csv format
    collection:agreement_list_ex, 
    folder: "GEE_Folder",
    description:"agreement8tableIndia",
    fileFormat: 'csv'
    });
